<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

<!-- 指定spring读取db.properties配置 -->
<context:property-placeholder location="classpath:db.properties" />

	<!-- 1.将连接池 -->
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" ></property>
		<property name="driverClass" value="${jdbc.driverClass}" ></property>
		<property name="user" value="${jdbc.user}" ></property>
		<property name="password" value="${jdbc.password}" ></property>
	</bean>


	<!-- 
	配置hibernate 
	将sessionFactoryBean配置进去
	-->
	<!-- 配置方案1  使用外部的hibernate.cfg.xml配置信息   不推荐，因为尽量把配置写入Spring-->
	<!--
	 <bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
	
	</bean>
	 -->
	<!-- 方案2 在Spring配置文件中配置 -->
	<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 配置基本信息 -->
		
		<property name="hibernateProperties">
			<props>
				<!-- 由连接池提供
				<prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
				<prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/crm_32</prop>
				<prop key="hibernate.connection.username">root</prop>
				<prop key="hibernate.connection.password">123</prop> 
				-->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		
		 <property name="dataSource" ref="dataSource"></property>
		<property name="mappingDirectoryLocations" value="classpath:cn/itcast/domain">
			
		</property>
	</bean>
	
	
	<!-- 事务核心管理器,封装了所有事务操作. 依赖于连接池   jdbc
		<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<property name="dataSource" ref="dataSource" ></property>
	</bean> 
	-->
	
	<bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<tx:advice transaction-manager="transactionManager" id="txadvice">
		<tx:attributes>
			<!-- 实际开发配置  *表示后面匹配任意-->
			<tx:method name="save*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
			<tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
			<tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED" read-only="false"/>
			<!-- 查找方法一般配置 read——only：true  表示查找方法不允许改动数据 -->
			<tx:method name="get*" isolation="DEFAULT" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* cn.itcast.service.impl.*ServiceImpl.*(..))" id="pc"/>
		<aop:advisor advice-ref="txadvice" pointcut-ref="pc"/>
	</aop:config>
	
	<!-- 
	注解配置  service上写
	类上@Transactional(isolation=Isolation.REPEATABLE_READ,propagation=Propagation.REQUIRED,readOnly=true)
	方法上@Transactional(isolation=Isolation.REPEATABLE_READ,propagation=Propagation.REQUIRED,readOnly=false)
	就是最后一个只读属性更改
	<context:annotation-config></context:annotation-config>
	<tx:annotation-driven transaction-manager="transactionManager"/> 
	-->
	<context:component-scan base-package="cn.itcast"></context:component-scan>
	<!-- #######################以下为 三层实用配置####################################### -->
	<bean name="userAction"  class="cn.itcast.web.action.UserAction" scope="prototype">
		<property name="userService" ref="userService"></property>
	</bean>
	
	<bean name="customerAction"  class="cn.itcast.web.action.CustomerAction" scope="prototype">
		<property name="customerService" ref="customerService"></property>
	</bean>
	
	<bean name="userService" class="cn.itcast.service.impl.UserServiceImpl"></bean>
	<bean name="customerService" class="cn.itcast.service.impl.CustomerServiceImpl"></bean>
	
	<bean name="userDao" class="cn.itcast.dao.impl.UserDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean name="customerDao" class="cn.itcast.dao.impl.CustomerDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
</beans>
